{"version":3,"file":"ab-message-queue.umd.js.map","sources":["ng://ab-message-queue/lib/decorator.ts","ng://ab-message-queue/lib/ab-message-queue.service.ts","ng://ab-message-queue/lib/ab-message-queue.module.ts"],"sourcesContent":["import 'reflect-metadata';\nimport { Subject } from 'rxjs';\n\nexport const subject = new Subject<any>();\n\n/**\n *\n * @param type æ¶æ¯ç±»åï¼å¤ä¸ªç±»åä»¥,åé\n * @example\n *      @MessageHandler('test')\n *      handlerTest(value: any) {\n *        // ...\n *      }\n */\nexport const MessageHandler = function (type: string) {\n  return function (target: any, key: string, descriptor: any) {\n    if (/(\\w+\\,)*\\w+/.test(type)) {\n      const types = type.split(',');\n      let map = Reflect.getMetadata('ab:handler', target);\n      if (!map) {\n        map = new Map<String, Function>();\n      }\n      types.forEach((t: string) => {\n        map[t] = descriptor.value;\n      });\n      Reflect.defineMetadata('ab:message', subject.asObservable(), target);\n      Reflect.defineMetadata('ab:handler', map, target);\n    } else {\n      throw new Error('ç±»åä»éå­æ¯æ°å­ä¸åçº¿');\n    }\n  };\n};\n\n","import { Injectable } from '@angular/core';\nimport { subject } from './decorator';\nimport { Observable } from 'rxjs';\n\n/**\n * æ¶æ¯åéæå¡ç±»\n * @author xuchao\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AbMessageQueueService {\n\n  constructor() { }\n\n  /**\n   * æ¶æ¯åéæ¹æ³\n   * @param type æ¶æ¯ç±»å\n   * @param value æ¶æ¯æºå¸¦å¼\n   */\n  public send(type: string, value?: any) {\n    subject.next({ type, value });\n  }\n\n  /**\n   * å°æ¶æ¯å¤çæ¹æ³ç»å®å°å¯¹åºå®ä½ä¸\n   * @param context componentå®ä½\n   */\n  public bind(context: any) {\n    const queue = Reflect.getMetadata('ab:message', context) as Observable<any>;\n    const handler = Reflect.getMetadata('ab:handler', context);\n    if (queue) {\n      queue.subscribe(val => {\n        const callback = handler[val.type];\n        if (callback) {\n          callback.call(context, val.value);\n        }\n      });\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AbMessageQueueService } from './ab-message-queue.service';\n@NgModule({\n  imports: [\n  ],\n  declarations: [],\n  exports: []\n})\nexport class AbMessageQueueModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AbMessageQueueModule,\n      providers: [AbMessageQueueService]\n    };\n  }\n}\n"],"names":["Subject","Injectable","NgModule"],"mappings":";;;;;;;;;;AAAA,yBAGa,OAAO,GAAG,IAAIA,YAAO,EAAO,CAAC;;;;;;;;;;AAW1C,yBAAa,cAAc,GAAG,UAAU,IAAY;QAClD,OAAO,UAAU,MAAW,EAAE,GAAW,EAAE,UAAe;YACxD,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5B,qBAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC9B,qBAAI,KAAG,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;gBACpD,IAAI,CAAC,KAAG,EAAE;oBACR,KAAG,GAAG,IAAI,GAAG,EAAoB,CAAC;iBACnC;gBACD,KAAK,CAAC,OAAO,CAAC,UAAC,CAAS;oBACtB,KAAG,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;iBAC3B,CAAC,CAAC;gBACH,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE,MAAM,CAAC,CAAC;gBACrE,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,KAAG,EAAE,MAAM,CAAC,CAAC;aACnD;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;aAChC;SACF,CAAC;KACH;;;;;;AC/BD;;;;;QAaE;SAAiB;;;;;;;QAOV,oCAAI;;;;;;sBAAC,IAAY,EAAE,KAAW;gBACnC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;;;;;;;QAOzB,oCAAI;;;;;sBAAC,OAAY;gBACtB,qBAAM,KAAK,IAAG,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAoB,CAAA,CAAC;gBAC5E,qBAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBAC3D,IAAI,KAAK,EAAE;oBACT,KAAK,CAAC,SAAS,CAAC,UAAA,GAAG;wBACjB,qBAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACnC,IAAI,QAAQ,EAAE;4BACZ,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;yBACnC;qBACF,CAAC,CAAC;iBACJ;;;oBA9BJC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;oCAVD;;;;;;;ACAA;;;;;;QASS,4BAAO;;;YAAd;gBACE,OAAO;oBACL,QAAQ,EAAE,oBAAoB;oBAC9B,SAAS,EAAE,CAAC,qBAAqB,CAAC;iBACnC,CAAC;aACH;;oBAZFC,WAAQ,SAAC;wBACR,OAAO,EAAE,EACR;wBACD,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;qBACZ;;mCAPD;;;;;;;;;;;;;;;;;;;;;;;;;;"}
