{"version":3,"sources":["ng://ab-message-queue/lib/decorator.ts","ng://ab-message-queue/lib/ab-message-queue.service.ts","ng://ab-message-queue/lib/ab-message-queue.module.ts"],"names":["subject","Subject","AbMessageQueueService","prototype","send","type","value","next","bind","context","queue","Reflect","getMetadata","handler","subscribe","val","callback","call","Injectable","args","providedIn","AbMessageQueueModule","forRoot","ngModule","providers","NgModule","imports","declarations","exports","target","key","descriptor","test","Error","types","split","map_1","Map","forEach","t","defineMetadata","asObservable"],"mappings":"oWAAA,IAGaA,EAAU,IAAIC,EAAAA,qBCUzB,SAAAC,YAOOA,EAAAC,UAAAC,cAAKC,EAAcC,GACxBN,EAAQO,KAAK,CAAEF,KAAIA,EAAEC,MAAKA,KAOrBJ,EAAAC,UAAAK,cAAKC,GACV,IAAMC,EAAQC,QAAQC,YAAY,aAAcH,GAC1CI,EAAUF,QAAQC,YAAY,aAAcH,GAC9CC,GACFA,EAAMI,UAAU,SAAAC,GACd,IAAMC,EAAWH,EAAQE,EAAIV,MACzBW,GACFA,EAASC,KAAKR,EAASM,EAAIT,8BA3BpCY,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,2JCTdC,EAAA,gCASSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAACtB,yBAVjBuB,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,GAETC,aAAc,GACdC,QAAS,SANX,mFFc8B,SAAUvB,GACtC,OAAO,SAAUwB,EAAaC,EAAaC,GACzC,IAAI,cAAcC,KAAK3B,GAYrB,MAAM,IAAI4B,MAAM,eAXhB,IAAMC,EAAQ7B,EAAK8B,MAAM,KACrBC,EAAMzB,QAAQC,YAAY,aAAciB,GACvCO,IACHA,EAAM,IAAIC,KAEZH,EAAMI,QAAQ,SAACC,GACbH,EAAIG,GAAKR,EAAWzB,QAEtBK,QAAQ6B,eAAe,aAAcxC,EAAQyC,eAAgBZ,GAC7DlB,QAAQ6B,eAAe,aAAcJ,EAAKP","sourcesContent":["import 'reflect-metadata';\nimport { Subject } from 'rxjs';\n\nexport const subject = new Subject<any>();\n\n/**\n *\n * @param type æ¶æ¯ç±»åï¼å¤ä¸ªç±»åä»¥,åé\n * @example\n *      @MessageHandler('test')\n *      handlerTest(value: any) {\n *        // ...\n *      }\n */\nexport const MessageHandler = function (type: string) {\n  return function (target: any, key: string, descriptor: any) {\n    if (/(\\w+\\,)*\\w+/.test(type)) {\n      const types = type.split(',');\n      let map = Reflect.getMetadata('ab:handler', target);\n      if (!map) {\n        map = new Map<String, Function>();\n      }\n      types.forEach((t: string) => {\n        map[t] = descriptor.value;\n      });\n      Reflect.defineMetadata('ab:message', subject.asObservable(), target);\n      Reflect.defineMetadata('ab:handler', map, target);\n    } else {\n      throw new Error('ç±»åä»éå­æ¯æ°å­ä¸åçº¿');\n    }\n  };\n};\n\n","import { Injectable } from '@angular/core';\nimport { subject } from './decorator';\nimport { Observable } from 'rxjs';\n\n/**\n * æ¶æ¯åéæå¡ç±»\n * @author xuchao\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AbMessageQueueService {\n\n  constructor() { }\n\n  /**\n   * æ¶æ¯åéæ¹æ³\n   * @param type æ¶æ¯ç±»å\n   * @param value æ¶æ¯æºå¸¦å¼\n   */\n  public send(type: string, value?: any) {\n    subject.next({ type, value });\n  }\n\n  /**\n   * å°æ¶æ¯å¤çæ¹æ³ç»å®å°å¯¹åºå®ä½ä¸\n   * @param context componentå®ä½\n   */\n  public bind(context: any) {\n    const queue = Reflect.getMetadata('ab:message', context) as Observable<any>;\n    const handler = Reflect.getMetadata('ab:handler', context);\n    if (queue) {\n      queue.subscribe(val => {\n        const callback = handler[val.type];\n        if (callback) {\n          callback.call(context, val.value);\n        }\n      });\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AbMessageQueueService } from './ab-message-queue.service';\n@NgModule({\n  imports: [\n  ],\n  declarations: [],\n  exports: []\n})\nexport class AbMessageQueueModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AbMessageQueueModule,\n      providers: [AbMessageQueueService]\n    };\n  }\n}\n"]}